{
	"version": "2.0.0",
	"tasks": [
        {
            "type": "docker-build",
            "label": "docker-build",
            "platform": "python",
            "dockerBuild": {
                "tag": "myfirstcopilotplugin:latest",
                "dockerfile": "${workspaceFolder}/Dockerfile",
                "context": "${workspaceFolder}",
                "pull": true
            }
        },
        {
            "type": "docker-run",
            "label": "docker-run: debug",
            "dependsOn": [
                "docker-build"
            ],
            "dockerRun": {
                "env": {
                    "FLASK_APP": "app.py"
                }
            },
            "python": {
                "args": [
                    "run",
                    "--no-debugger",
                    "--no-reload",
                    "--host",
                    "0.0.0.0",
                    "--port",
                    "5002"
                ],
                "module": "flask"
            }
        },
        {
            "label": "Install requirements",
            "type": "shell",
            "windows": {
                "command": ".\\setup_env.cmd"
            },
        },
        {
            "label": "Start local tunnel",
            "type": "shell",
            "command": "devtunnel user login -g; devtunnel host -p 5000 --allow-anonymous",
            "linux": {
                "command": "devtunnel user login -g; devtunnel host -p 5000 --allow-anonymous"
            },
            "windows": {
                "command": "devtunnel user login -g; devtunnel host -p 5000 --allow-anonymous"
            },
            "isBackground": true,
            "problemMatcher": {
                "pattern": [
                    {
                        "regexp": "^.*$",
                        "file": 0,
                        "location": 1,
                        "message": 2
                    }
                ],
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": ".*",
                    "endsPattern": "Ready to accept connections for tunnel"
                }
            }
        },
        {
            "label": "Terminate All Tasks",
            "command": "${input:terminate}",
            "type": "shell",
            "problemMatcher": []
        }
    ],
    "inputs": [
        {
            "id": "terminate",
            "type": "command",
            "command": "workbench.action.tasks.terminate",
            "args": "terminateAll"
        }
    ]
}